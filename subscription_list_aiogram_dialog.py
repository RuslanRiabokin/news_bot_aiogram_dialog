import logging
from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager, StartMode
from aiogram_dialog.widgets.kbd import Button, ScrollingGroup, Select, Row
from aiogram_dialog.widgets.text import Const, Format

from db_layer.database import AsyncDatabase
from db_layer.db_factory import get_data_serice
from states_class_aiogram_dialog import MainDialogSG, SecondDialogSG, EditSubscriptions


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
#db = AsyncDatabase()


async def close_second_dialog(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ó–∞–∫—Ä–∏–≤–∞—î –¥—Ä—É–≥–∏–π –¥—ñ–∞–ª–æ–≥."""
    await dialog_manager.done()


async def switch_to_second_lists(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –¥—Ä—É–≥–µ –≤—ñ–∫–Ω–æ –¥—Ä—É–≥–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É."""
    await dialog_manager.switch_to(state=SecondDialogSG.second)


async def handle_subscription_click(callback: CallbackQuery, widget: Select, dialog_manager: DialogManager,
                                    item_id: str):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î item_id —ñ topic_name —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ."""
    # –ü—Ä–∏–≤–æ–¥–∏–º–æ item_id –¥–æ —Ü—ñ–ª–æ–≥–æ —á–∏—Å–ª–∞
    try:
        item_id = int(item_id)
    except ValueError:
        logging.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç item_id: {item_id}")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–æ–∫ —ñ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    subscriptions = dialog_manager.dialog_data.get("subscriptions", [])

    # –®—É–∫–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –∑–∞ item_id (sub_id)
    selected_subscription = next((sub for sub in subscriptions if sub[0] == item_id), None)

    if selected_subscription:
        topic_name = selected_subscription[1]  # –ù–∞–∑–≤–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
        dialog_manager.dialog_data["item_id"] = item_id
        dialog_manager.dialog_data["topic_name"] = topic_name
        logging.info(f"–û–±—Ä–∞–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞: {selected_subscription}")
    else:
        logging.error(f"–ü—ñ–¥–ø–∏—Å–∫—É –∑ id {item_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

    await dialog_manager.switch_to(state=SecondDialogSG.second)


async def subscription_getter(dialog_manager: DialogManager, **kwargs):
    """–û—Ç—Ä–∏–º—É—î –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ª–æ–≥—É—î —ó—Ö."""
    user_id = dialog_manager.event.from_user.id
    logging.info(f"–û—Ç—Ä–∏–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id}")

    try:
        async with get_data_serice() as db:
            logging.info("–í—ñ–¥–∫—Ä–∏—Ç–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
            subscriptions = await db.get_subscriptions(user_id)
            logging.info(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {subscriptions}")
            dialog_manager.dialog_data["subscriptions"] = subscriptions

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –∞–±–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–æ–∫
        if subscriptions:
            buttons = [
                (f"{topic_name} - {channel_name} {is_active}", sub_id)
                for sub_id, topic_name, channel_name,_ , is_active in subscriptions
            ]
            logging.info(f"–ö–Ω–æ–ø–∫–∏, –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –¥–ª—è –ø—ñ–¥–ø–∏—Å–æ–∫: {buttons}")
            return {"subscriptions": buttons, "no_subscriptions": False}
        else:
            logging.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫.")
            return {"subscriptions": [], "no_subscriptions": True}
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫: {e}")
        return {"subscriptions": [], "no_subscriptions": True}



async def second_window_getter(dialog_manager: DialogManager, **kwargs):
    """–ü–µ—Ä–µ–¥–∞—î item_id —Ç–∞ topic_name –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –¥—Ä—É–≥–æ–º—É –≤—ñ–∫–Ω—ñ."""
    item_id = dialog_manager.dialog_data.get("item_id", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø—ñ–¥–ø–∏—Å–∫–∞")
    topic_name = dialog_manager.dialog_data.get("topic_name", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø—ñ–¥–ø–∏—Å–∫–∞")
    logging.info(f"–î—Ä—É–≥–µ –≤—ñ–∫–Ω–æ: item_id={item_id}, topic_name={topic_name}")  # –õ–æ–≥—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    return {"item_id": item_id, "topic_name": topic_name}


async def back_to_subscriptions(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≤—ñ–∫–Ω–∞ –∑ –ø—ñ–¥–ø–∏—Å–∫–∞–º–∏."""
    await dialog_manager.switch_to(state=SecondDialogSG.first)


async def go_start(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–µ–Ω—é."""
    await dialog_manager.start(state=MainDialogSG.menu, mode=StartMode.RESET_STACK)


async def delete_subscription_message(
    callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    """–í–∏–¥–∞–ª—è—î –ø—ñ–¥–ø–∏—Å–∫—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è."""
    # –û—Ç—Ä–∏–º—É—î–º–æ item_id —ñ topic_name –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    item_id = dialog_manager.dialog_data.get("item_id", None)
    topic_name = dialog_manager.dialog_data.get("topic_name", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø—ñ–¥–ø–∏—Å–∫–∞")

    if item_id is None:
        logging.error("ID –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ!")
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: ID –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        # –ü—Ä–∞—Ü—é—î–º–æ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ async with
        async with get_data_serice() as db:
            # –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            await db.delete_news(item_id)
            logging.info(f"–ü—ñ–¥–ø–∏—Å–∫–∞ –∑ ID {item_id} –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")

            # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–æ–∫
            subscriptions = await db.get_subscriptions(callback.from_user.id)

        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        await callback.message.answer(
            f"‚úÖ –í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ –ø—ñ–¥–ø–∏—Å–∫—É: <b>{item_id}</b> - <b>{topic_name}</b>"
        )

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–æ–∫ —É –ø–µ—Ä—à–æ–º—É –≤—ñ–∫–Ω—ñ
        dialog_manager.dialog_data["subscriptions"] = subscriptions

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É –ø—ñ–¥–ø–∏—Å–æ–∫
        await dialog_manager.switch_to(state=SecondDialogSG.first)

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –∑ ID {item_id}: {e}")
        await callback.message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏.")


async def switch_to_edit_options(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤—ñ–∫–Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫."""
    item_id = dialog_manager.dialog_data.get("item_id")
    async with get_data_serice() as db:
        sub_status = await db.get_subscription_status(item_id)
    await dialog_manager.start(state=EditSubscriptions.edit, mode=StartMode.NORMAL)
    dialog_manager.dialog_data["item_id"] = item_id
    dialog_manager.dialog_data["sub_status"] = sub_status[0]

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –∑ –ø—ñ–¥–ø–∏—Å–∫–∞–º–∏
current_subscriptions_dialog = Dialog(
    Window(
        Const('<b>–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É –º–µ–Ω—é –≤–∞—à–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫!</b>\n'),
        # –í—ñ–¥–æ–±—Ä–∞–∑—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–æ–∫, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        Const('<b>–£ –≤–∞—Å —â–µ –Ω–µ–º–∞ –ø—ñ–¥–ø–∏—Å–æ–∫</b>', when="no_subscriptions"),
        # –Ø–∫—â–æ –ø—ñ–¥–ø–∏—Å–∫–∏ —î, —Ä–µ–Ω–¥–µ—Ä–∏–º–æ ScrollingGroup
        ScrollingGroup(
            Select(
                Format('{item[0]}'),
                id='subscriptions',
                item_id_getter=lambda x: x[1],
                items='subscriptions',
                on_click=handle_subscription_click,
            ),
            id='subscriptions_group',
            width=1,
            height=4,
        ),
        Button(Const('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é'), id='button_cancel', on_click=close_second_dialog),
        state=SecondDialogSG.first,
        getter=subscription_getter  # –î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –≤—ñ–∫–Ω–∞
    ),
    Window(
        Format("<b>–ú–µ–Ω—é –Ω–æ–≤–∏–Ω:</b>\n <b>–í–∏ –æ–±—Ä–∞–ª–∏ –ø—ñ–¥–ø–∏—Å–∫—É: {item_id} {topic_name}</b>"),
        Row(
            Button(Const('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ üìù'), id='edit_button', on_click=switch_to_edit_options),
            Button(Const('–í–∏–¥–∞–ª–∏—Ç–∏ üìù'), id='delete_button', on_click=delete_subscription_message),
        ),
        Button(Const('–°–∫–∞—Å—É–≤–∞—Ç–∏'), id='button_cancel', on_click=back_to_subscriptions),
        Button(Const('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–µ–Ω—é'), id='button_start', on_click=go_start),
        state=SecondDialogSG.second,
        getter=second_window_getter  # –î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –≤—ñ–∫–Ω–∞
    )
)