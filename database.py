import asyncio
import aiosqlite
from typing import List, Tuple
from config import DB_PATH

import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—ñ–≤
logging.basicConfig(level=logging.INFO)


class AsyncDatabase:
    def __init__(self, db_name=DB_PATH):
        self.db_name = db_name

    async def __aenter__(self):
        self.connection = await aiosqlite.connect(self.db_name)
        await self.connection.execute('PRAGMA foreign_keys=1')  # –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∫–ª—é—á—ñ–≤
        await self.connection.commit()
        return self

    async def __aexit__(self, exc_type, exc_value, traceback):
        await self.connection.close()

    async def create_db(self):
        """–°—Ç–≤–æ—Ä—é—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ."""
        await self.create_news_table()

    async def create_news_table(self):
        """–°—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—é News, —è–∫—â–æ –≤–æ–Ω–∞ —â–µ –Ω–µ —ñ—Å–Ω—É—î."""
        await self.connection.execute('''
        CREATE TABLE IF NOT EXISTS News (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            topic_name TEXT NOT NULL,
            channel_name TEXT NOT NULL,
            channel_url TEXT NOT NULL,
            last_pub_time TEXT NOT NULL,
            user_id TEXT NOT NULL,
            news_type TEXT NOT NULL,
            publish_frequency TEXT NOT NULL,
            language_code TEXT NOT NULL,
            add_poll TEXT NOT NULL,
            is_active TEXT NOT NULL,
            poll_text TEXT NOT NULL
        )
        ''')
        await  self.connection.execute('''
        CREATE TABLE IF NOT EXISTS Publish_date (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sub_id INTEGER NOT NULL,
            pub_time TEXT NOT NULL,
            FOREIGN KEY (sub_id) REFERENCES News(id) ON DELETE CASCADE
        )
        ''')
        await  self.connection.execute('''
        CREATE TABLE IF NOT EXISTS Publish_time (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sub_id INTEGER NOT NULL,
            pub_time TEXT NOT NULL,
            sended INTEGER NOT NULL DEFAULT 0,
            FOREIGN KEY (sub_id) REFERENCES News(id) ON DELETE CASCADE
        )
        ''')
        await self.connection.commit()

    async def set_all_sended_status_false(self):
        try:
            await self.connection.execute('''
            UPDATE Publish_time
            SET sended = 0
            ''')
            await self.connection.commit()
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ sended –Ω–∞ false: {e}")


    async def set_sended_status_true(self, sub_id, pub_time):
        try:
            await self.connection.execute('''
            UPDATE Publish_time
            SET sended = 1
            WHERE sub_id = ? and pub_time = ?
            ''', (sub_id, pub_time))
            await self.connection.commit()
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É sended –Ω–∞ true: {e}")


    async def get_sended_status(self, sub_id, pub_time):
        try:
            query = await self.connection.execute('''
            SELECT sended
            FROM Publish_time
            WHERE sub_id = ? and pub_time = ?
            ''', (sub_id, pub_time))
            result = await query.fetchone()
            return result
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É sended: {e}")

    async def add_publish_date(self, sub_id, pub_times):
        try:
            for pub_time in pub_times:
                await self.connection.execute('''
                    INSERT INTO Publish_date(sub_id, pub_time)
                    VALUES (?, ?)
                    ''', (sub_id, pub_time))
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Å—É: {e}")
            raise
        await self.connection.commit()

    async def del_publish_date(self, sub_id, pub_time):
        try:
            await self.connection.execute('''
                DELETE FROM Publish_date
                WHERE sub_id = ? AND pub_time = ?
                ''', (sub_id, pub_time))
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞—Ç–∏: {e}")
            raise
        await self.connection.commit()

    async def get_publish_date(self, sub_id):
        try:
            query = await self.connection.execute('''
            SELECT pub_time
            FROM Publish_date
            WHERE sub_id = ?
            ''', (sub_id, ))
            result = await query.fetchall()
            return result
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
            raise

    async def delete_dates(self, sub_id):
        try:
            await self.connection.execute('''
                        DELETE FROM Publish_date
                        WHERE sub_id = ?
                        ''', (sub_id, ))
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞—Ç: {e}")
            raise
        await self.connection.commit()


    async def add_publish_time(self, sub_id, pub_times):
        for pub_time in pub_times:
            try:
                await self.connection.execute('''
                    INSERT INTO Publish_time(sub_id, pub_time)
                    VALUES (?, ?)
                    ''', (sub_id, pub_time))

            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Å—É: {e}")
                raise
        await self.connection.commit()

    async def del_publish_time(self, sub_id, pub_time):
        try:
            await self.connection.execute('''
                DELETE FROM Publish_time
                WHERE sub_id = ? AND pub_time = ?
                ''', (sub_id, pub_time))
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Å—É: {e}")
            raise
        await self.connection.commit()

    async def get_publish_time(self, sub_id):
        try:
            query = await self.connection.execute('''
            SELECT pub_time
            FROM Publish_time
            WHERE sub_id = ?
            ''', (sub_id, ))
            result = await query.fetchall()
            return result
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —á–∞—Å—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
            raise

    async def delete_times(self, sub_id):
        try:
            await self.connection.execute('''
                        DELETE FROM Publish_time
                        WHERE sub_id = ?
                        ''', (sub_id, ))
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Å—ñ–≤: {e}")
            raise
        await self.connection.commit()

    async def insert_news(self, topic_name, channel_name, user_id, news_type='standart',
                          publish_frequency='1h', language_code='ua', add_poll='no',
                          poll_text='a, b, c', is_active='üü¢'):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—é News –∑ —á–∞—Å–æ–º –Ω–∞ 1 –≥–æ–¥–∏–Ω—É —Ä–∞–Ω—ñ—à–µ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ."""
        if not all([topic_name, channel_name, user_id]):
            raise ValueError("–¢–µ–º–∞, –∫–∞–Ω–∞–ª —Ç–∞ user_id —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏.")

        channel_url = channel_name
        try:
            cursor = await self.connection.execute('''
            INSERT INTO News (topic_name, channel_name, user_id, publish_frequency,
             news_type, channel_url, language_code, add_poll, poll_text, is_active, last_pub_time)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now', '-1 hour'))
            ''', (topic_name, channel_name, user_id, publish_frequency, news_type,
                  channel_url, language_code, add_poll, poll_text, is_active))
            await self.connection.commit()

            news_id = cursor.lastrowid
            return news_id

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏: {e}")
            raise

    async def set_subscription_status(self, status, sub_id: int):
        try:
            await self.connection.execute('''
            UPDATE News
            SET is_active = ?
            WHERE id = ?
            ''', (status, sub_id,))
            await self.connection.commit()
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–¥–∞–≤–∞–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
            raise

    async def get_subscription_status(self, sub_id: int):
        try:
            query = await self.connection.execute('''
               SELECT is_active
               FROM News
               WHERE id = ?
               ''', (sub_id,))
            result = await query.fetchone()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∫–∏
            await self.connection.commit()
            return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
            raise

    async def get_subscriptions(self, user_id: int) -> List[Tuple[int, str, str, str]]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç—Ä–∏–º—É—î –∞–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
        query = """
            SELECT id, topic_name, channel_name, last_pub_time, is_active
            FROM News
            WHERE user_id = ? AND (is_active = 'üü¢' OR is_active = 'pause')
        """
        try:
            async with self.connection.execute(query, (user_id,)) as cursor:
                subscriptions = await cursor.fetchall()
            return subscriptions
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫: {e}")
            raise

    async def delete_news(self, news_id: int):
        """–î–µ–∞–∫—Ç–∏–≤—É—î –Ω–æ–≤–∏–Ω—É –∑–∞ —ó—ó id."""
        try:
            await self.connection.execute('''
            UPDATE News
            SET is_active = 'deactivated'
            WHERE id = ?
            ''', (news_id,))
            await self.connection.commit()
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏: {e}")
            raise

    async def get_user_subscriptions(self, user_id, status='all', search_field=None, search_value=None):
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ user_id –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–æ—à—É–∫—É."""
        # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è SQL-–∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç—É—Å—É
        query_map = {
            'all': '''
                SELECT id, topic_name, channel_name, publish_frequency, news_type, is_active, last_pub_time, add_poll
                FROM News
                WHERE user_id = ?''',
            'active': '''
                SELECT id, topic_name, channel_name, publish_frequency, news_type, is_active, last_pub_time, add_poll
                FROM News
                WHERE user_id = ? AND is_active = 'üü¢' ''',
            'inactive': '''
                SELECT id, topic_name, channel_name, publish_frequency, news_type, is_active, last_pub_time, add_poll
                FROM News
                WHERE user_id = ? AND is_active = 'üî¥' '''
        }

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π SQL-–∑–∞–ø–∏—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
        query = query_map.get(status)

        if not query:
            raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏: 'all', 'active', 'inactive'.")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–∏—Ö –ø–æ–ª—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É
        allowed_fields = ['topic_name', 'channel_name', 'publish_frequency', 'news_type']
        if search_field and search_field not in allowed_fields:
            raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–µ –ø–æ–ª–µ –¥–ª—è –ø–æ—à—É–∫—É: {search_field}.")

        # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —É–º–æ–≤—É –ø–æ—à—É–∫—É, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–æ–ª–µ —ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        if search_field and search_value:
            query += f" AND {search_field} LIKE ?"
            query_params = (user_id, f"%{search_value}%")
        else:
            query_params = (user_id,)

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—É
        logging.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—É: {query} –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {query_params}")

        # –í–∏–∫–æ–Ω—É—î–º–æ SQL-–∑–∞–ø–∏—Ç —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            async with self.connection.execute(query, query_params) as cursor:
                return await cursor.fetchall()
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: {e}")
            raise

    async def get_channels_for_publishing(self):
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∫–∞–Ω–∞–ª–∏ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω, —è–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –±—É–ª–∞ –ø–æ–Ω–∞–¥ –≥–æ–¥–∏–Ω—É —Ç–æ–º—É."""
        async with self.connection.execute('''
        SELECT id, topic_name, channel_name, user_id, publish_frequency, 
        news_type, add_poll, poll_text, is_active, last_pub_time
        FROM News
        ''') as cursor:
            channels = await cursor.fetchall()
        return [{
            'id': row[0],
            'topic_name': row[1],
            'channel_name': row[2],
            'user_id': row[3],
            'publish_frequency': row[4],
            'news_type': row[5],
            'add_poll': row[6],
            'poll_text': row[7],
            'is_active': row[8],
            'last_pub_time': row[9]} for row in channels]

    async def get_last_times_list(self):
        async with self.connection.execute('''
        SELECT last_pub_time, topic_name
        FROM News
        ''') as cursor:
            times = await cursor.fetchall()
        return [{'last_pub_time': row[0], 'topic_name': row[1]} for row in times]

    async def update_last_published_time(self, topic_id):
        """–û–Ω–æ–≤–ª—é—î —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏."""
        await self.connection.execute('''
        UPDATE News
        SET last_pub_time = datetime('now', 'localtime')
        WHERE id = ?
        ''', (topic_id,))
        await self.connection.commit()

async def main():
    async with AsyncDatabase() as db:
        await db.set_all_sended_status_false()

if __name__ == '__main__':
    asyncio.run(main())