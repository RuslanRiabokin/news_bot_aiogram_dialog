from aiogram import F
from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.kbd import Button, Row, Group, Column
from aiogram_dialog.widgets.text import Const, Format

from custom_calendar import CustomCalendar, on_date_selected, selection_getter
from states_class_aiogram_dialog import EditSubscriptions, SecondDialogSG
from time_meneger import (on_time_success, time_getter, date_getter, time_date_getter,
                          date_selection_every_day,
                          finish_date_selection, time_selection_every_hour)


# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥—ñ–π –∑ –∫–Ω–æ–ø–∫–∞–º–∏

async def add_poll(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await callback.message.answer("üìä –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ.")


async def send_cat(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await callback.message.answer("–û—Å—å –≤–∞—à –∫–æ—Ç–∏–∫! üêà")
    await callback.answer()


# –°–ª–æ–≤–Ω–∏–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
MESSAGES = {
    "uk": "–í–∏ –æ–±—Ä–∞–ª–∏ –º–æ–≤—É: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "en": "You selected the language: English",
    "ru": "–í—ã –≤—ã–±—Ä–∞–ª–∏: –†—É—Å—Å–∫–∏–π",
    "de": "Sie haben die Sprache gew√§hlt: Deutsch",
}


async def on_language_selected(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –≤–∏–±—Ä–∞–Ω—ñ–π –º–æ–≤—ñ."""
    selected_language = button.widget_id  # ID –∫–Ω–æ–ø–∫–∏ —è–∫ –∫–æ–¥ –º–æ–≤–∏
    message = MESSAGES.get(selected_language,
                           f"Selected language: {selected_language}")  # –ë–µ—Ä–µ–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω–µ

    await callback.message.answer(message)  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –º–æ–≤—ñ
    await dialog_manager.switch_to(EditSubscriptions.edit)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è


async def select_language(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤—ñ–∫–Ω–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏."""
    await dialog_manager.switch_to(EditSubscriptions.select_language)


async def back_to_subscription_details(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –¥–µ—Ç–∞–ª–µ–π –ø—ñ–¥–ø–∏—Å–∫–∏."""
    await dialog_manager.done()
    await dialog_manager.switch_to(SecondDialogSG.second)


async def switch_to_subscriptions(c: CallbackQuery, b: Button, d: DialogManager):
    await d.start(SecondDialogSG.first)  # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –í—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
select_language_window = Window(
    Const("<b>–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:</b>"),
    Group(
        Row(
            Button(Const("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"), id="uk", on_click=on_language_selected),
            Button(Const("üá¨üáßÛ†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø English"), id="en", on_click=on_language_selected),
        ),
        Row(
            Button(Const("üá∑üá∫ –†—É—Å—Å–∫–∏–π"), id="ru", on_click=on_language_selected),
            Button(Const("üá©üá™ Deutsch"), id="de", on_click=on_language_selected),
        ),
    ),
    Button(Const("–ù–∞–∑–∞–¥"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit)),
    state=EditSubscriptions.select_language,
)

# –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏
edit_subscription_window = Window(
    Const("<b>–û–ø—Ü—ñ—ó —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏:</b>\n"),
    Button(Const("üï∞ –ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"), id="change_time",
           on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_time)),
    Button(Const("üí¨ –û–±—Ä–∞—Ç–∏ –º–æ–≤—É"), id="select_language", on_click=select_language),
    Button(Const("üìä –î–æ–¥–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è"), id="add_poll", on_click=add_poll),
    Button(Const("üêà –í–∏—Å–ª–∞—Ç–∏ –∫–æ—Ç–∏–∫–∞"), id="send_cat", on_click=send_cat),
    Row(
Button(Const('üóí –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏'), id='sub_list', on_click=switch_to_subscriptions),
        Button(Const("üîô"), id="back_button", on_click=back_to_subscription_details),
    ),
    state=EditSubscriptions.edit,
)



edit_time_window = Window(
    Const("<b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —á–∞—Å—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:\n</b>"),
    Format("–û–±—Ä–∞–Ω–∏–π —á–∞—Å: <b>{date} {time}</b>", when=F["date" or "time"]),
    Format("–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ <b>–¥–∞—Ç—É</b>", when=~F["date"]),
    Format("–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ <b>—á–∞—Å</b>", when=~F["time"]),
    Row(
        Button(Const("‚è∞ –ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"), id="enter_time",
               on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_t_time)),
        Button(Const("üìÜ –î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"), id="enter_date",
               on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_d_time)),
    ),
    Button(Const("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit)),
    state=EditSubscriptions.edit_time,
    getter=time_date_getter
)

# –í—ñ–∫–Ω–æ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
calendar_window = Window(
    Const("<b>–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç–∏:</b>"),
    Format("\nSelected: {selected}", when=F["selected"]),
    Format("\nNo dates selected", when=~F["selected"]),
    CustomCalendar(
        id="calendar",
        on_click=on_date_selected,
    ),
    Button(Const("‚úîÔ∏è –û–±—Ä–∞—Ç–∏"), id="finish", on_click=finish_date_selection),
    Button(Const("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_d_time)),
    state=EditSubscriptions.calendar,
    getter=selection_getter
)

edit_d_time_window = Window(
    Const("<b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞—Ç –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</b>"),
    Format("\n–û–±—Ä–∞–Ω—ñ –¥–∞—Ç–∏: <b>{date}</b>", when=F["date"]),
    Format("–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ <b>–¥–∞—Ç—É</b>", when=~F["date"]),
    Row(
        Button(Const("üìÖ –ö–æ–∂–µ–Ω –¥–µ–Ω—å"), id="every_day",
               on_click=date_selection_every_day),
        Button(Const("üëá –û–±—Ä–∞—Ç–∏ –¥–∞—Ç—É"), id="calendar",
               on_click=lambda c, b, d: d.switch_to(EditSubscriptions.calendar)),
    ),
    Button(Const("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_time)),
    state=EditSubscriptions.edit_d_time,
    getter=date_getter
)

edit_t_time_window = Window(
    Const("<b>–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</b>"),
    Format("\n–û–±—Ä–∞–Ω–∏–π —á–∞—Å: <b>{time}</b>", when=F["time"]),
    Format("\n–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ <b>—á–∞—Å</b>", when=~F["time"]),
    Column(
        Button(Const("üïê –ö–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É"), id="every_hour", on_click=lambda c, b, d: time_selection_every_hour(c, b, d, "")),
        Button(Const("üïí –ö–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏"), id="every_3_hours",
               on_click=lambda c, b, d: time_selection_every_hour(c, b, d, "3")),
        Button(Const("üïï –ö–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω"), id="every_6_hours",
               on_click=lambda c, b, d: time_selection_every_hour(c, b, d, "6")),
    ),
    Row(
        Button(Const("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —á–∞—Å"), id="edit_time",
               on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_time_write)),
    ),
    Button(Const("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_time)),
    state=EditSubscriptions.edit_t_time,
    getter=time_getter
)

edit_time_write_window = Window(
    Const("<b>–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</b>\n\n"
          "–í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ '<b>9:30</b>' —á–∏ '<b>9:45, 13:15</b>'"),
    Format("–û–±—Ä–∞–Ω–∏–π —á–∞—Å: <b>{time}</b>", when=F["time"]),
    Format("–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ <b>—á–∞—Å</b>", when=~F["time"]),
    TextInput(
        id='news_input',
        on_success=on_time_success,
    ),
    Button(Const("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_t_time)),
    state=EditSubscriptions.edit_time_write,
    getter=time_getter
)

# –û–±'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–∫–æ–Ω —É –¥—ñ–∞–ª–æ–≥
edit_subscription_dialog = Dialog(
    edit_subscription_window,
    edit_time_window,
    edit_d_time_window,
    edit_t_time_window,
    edit_time_write_window,
    select_language_window,
    calendar_window,
)
