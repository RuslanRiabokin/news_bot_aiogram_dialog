import logging
from aiogram import F
from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.kbd import Button, Row, Group
from aiogram_dialog.widgets.text import Const, Format

from db_layer.db_factory import get_data_serice
from time_meneger import on_time_success, time_getter, date_getter,time_date_getter ,date_selection_every_day, finish_date_selection,time_selection_every_hour
from states_class_aiogram_dialog import EditSubscriptions, SecondDialogSG
from subscription_list_aiogram_dialog import go_start
from custom_calendar import CustomCalendar, on_date_selected, selection_getter
from db_layer.database import AsyncDatabase



# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥—ñ–π –∑ –∫–Ω–æ–ø–∫–∞–º–∏
async def edit_publication_time(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await callback.message.answer("üïí –ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –±—É–¥–µ –∑–º—ñ–Ω–µ–Ω–æ.")


async def pause_or_run_publication(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    sub_id = dialog_manager.dialog_data.get('item_id')
    async with get_data_serice() as db:
        sub_status = (await db.get_subscription_status(sub_id))[0]
        dialog_manager.dialog_data['sub_status'] = sub_status
        if sub_status == 'üü¢':
            await db.set_subscription_status(status='pause', sub_id=sub_id)
            await callback.message.answer("‚è∏ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—é –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.")
        elif sub_status == 'pause':
            await db.set_subscription_status(status='üü¢', sub_id=sub_id)
            await callback.message.answer("‚ñ∂ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —Ä–æ–∑–ø–æ—á–∞—Ç–∞.")
        else:
            logging.error(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–∏–Ω–∏ {sub_status}')
            await callback.message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–∏–Ω–∏.")
    await dialog_manager.switch_to(EditSubscriptions.edit)


async def dialog_data_getter(dialog_manager: DialogManager, **kwargs):
    """–ü–µ—Ä–µ–¥–∞—ë—Ç —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏."""
    sub_id = dialog_manager.dialog_data.get('item_id')
    sub_status = dialog_manager.dialog_data.get("sub_status")  # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    sub_status_text = ("–†–æ–∑–ø–æ—á–∞—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é ‚ñ∂" if sub_status == "üü¢" else "–ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é ‚è∏")
    return {"publication_status": sub_status, "publication_status_text": sub_status_text}


async def add_poll(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await callback.message.answer("üìä –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ.")


async def send_cat(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await callback.message.answer("–û—Å—å –≤–∞—à –∫–æ—Ç–∏–∫! üêà")
    await callback.answer()


# –°–ª–æ–≤–Ω–∏–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
MESSAGES = {
    "uk": "–í–∏ –æ–±—Ä–∞–ª–∏ –º–æ–≤—É: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "en": "You selected the language: English",
    "ru": "–í—ã –≤—ã–±—Ä–∞–ª–∏: –†—É—Å—Å–∫–∏–π",
    "de": "Sie haben die Sprache gew√§hlt: Deutsch",
}


async def on_language_selected(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –≤–∏–±—Ä–∞–Ω—ñ–π –º–æ–≤—ñ."""
    selected_language = button.widget_id  # ID –∫–Ω–æ–ø–∫–∏ —è–∫ –∫–æ–¥ –º–æ–≤–∏
    message = MESSAGES.get(selected_language,
                           f"Selected language: {selected_language}")  # –ë–µ—Ä–µ–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω–µ

    await callback.message.answer(message)  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –º–æ–≤—ñ
    await dialog_manager.switch_to(EditSubscriptions.edit)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è


async def select_language(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤—ñ–∫–Ω–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏."""
    await dialog_manager.switch_to(EditSubscriptions.select_language)


async def back_to_subscription_details(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –¥–µ—Ç–∞–ª–µ–π –ø—ñ–¥–ø–∏—Å–∫–∏."""
    await dialog_manager.done()
    await dialog_manager.switch_to(SecondDialogSG.second)


# –í—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
select_language_window = Window(
    Const("<b>–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:</b>"),
    Group(
        Row(
            Button(Const("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"), id="uk", on_click=on_language_selected),
            Button(Const("English"), id="en", on_click=on_language_selected),
        ),
        Row(
            Button(Const("–†—É—Å—Å–∫–∏–π"), id="ru", on_click=on_language_selected),
            Button(Const("Deutsch"), id="de", on_click=on_language_selected),
        ),
    ),
    Button(Const("–ù–∞–∑–∞–¥"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit)),
    state=EditSubscriptions.select_language,
)

# –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏
edit_subscription_window = Window(
    Const("<b>–û–ø—Ü—ñ—ó —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏</b>\n"),
    Row(
        Button(Const("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó üïí"), id="change_time",
               on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_time)),
    ),
    Row(
        Button(Format("{publication_status_text}"), id="pause_or_run_publication", on_click=pause_or_run_publication),
        Button(Const("–î–æ–¥–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è üìä"), id="add_poll", on_click=add_poll),
    ),
    Row(
        Button(Const("–í–∏–±—Ä–∞—Ç–∏ –º–æ–≤—É"), id="select_language", on_click=select_language),
        Button(Const("–í–∏—Å–ª–∞—Ç–∏ –∫–æ—Ç–∏–∫–∞ üêà"), id="send_cat", on_click=send_cat),
    ),
    Button(Const("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥"), id="back_button", on_click=back_to_subscription_details),
    Button(Const("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–µ–Ω—é"), id="button_start", on_click=go_start),
    state=EditSubscriptions.edit,
    getter=dialog_data_getter,
)

"""# –û–±'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–∫–æ–Ω –≤ –æ–¥–∏–Ω –¥—ñ–∞–ª–æ–≥
edit_subscription_dialog = Dialog(
    edit_subscription_window,
    select_language_window,
)"""

edit_time_window = Window(
    Const("<b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —á–∞—Å—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</b>"),
    Format("\nSelected date: {date}", when=F["date"]),
    Format("\nNo date selected", when=~F["date"]),
    Format("\nSelected Time: {time}", when=F["time"]),
    Format("\nNo time selected", when=~F["time"]),
    Row(
        Button(Const("–û–±—Ä–∞—Ç–∏ —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"), id="enter_time",
               on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_t_time)),
        Button(Const("–û–±—Ä–∞—Ç–∏ –¥–∞—Ç—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"), id="enter_date",
               on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_d_time)),
    ),
    Button(Const("–ù–∞–∑–∞–¥"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit)),
    state=EditSubscriptions.edit_time,
    getter=time_date_getter
)

# –í—ñ–∫–Ω–æ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
calendar_window = Window(
    Const("<b>–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç–∏:</b>"),
    Format("\nSelected: {selected}", when=F["selected"]),
    Format("\nNo dates selected", when=~F["selected"]),
    CustomCalendar(
        id="calendar",
        on_click=on_date_selected,
    ),
    Button(Const("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä"), id="finish", on_click=finish_date_selection),
    Button(Const("–ù–∞–∑–∞–¥"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_d_time)),
    state=EditSubscriptions.calendar,
    getter=selection_getter
)

edit_d_time_window = Window(
    Const("<b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞—Ç –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</b>"),
    Format("\nSelected date: {date}", when=F["date"]),
    Format("\nNo date selected", when=~F["date"]),
    Row(
        Button(Const("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∫–æ–∂–µ–Ω –¥–µ–Ω—å"), id="every_day",
               on_click=date_selection_every_day),
        Button(Const("–û–±—Ä–∞—Ç–∏ –¥–∞—Ç—É —Å–∞–º–æ–º—É"), id="calendar",
               on_click=lambda c, b, d: d.switch_to(EditSubscriptions.calendar)),
    ),
    Button(Const("–ù–∞–∑–∞–¥"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_time)),
    state=EditSubscriptions.edit_d_time,
    getter=date_getter
)

edit_t_time_window = Window(
    Const("–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:"),
    Format("\nSelected Time: {time}", when=F["time"]),
    Format("\nNo time selected", when=~F["time"]),
    Row(
        Button(Const("–ö–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É"), id="every_hour", on_click=lambda c, b, d: time_selection_every_hour(c, b, d, "")),
        Button(Const("–ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏"), id="every_2_hours", on_click=lambda c, b, d: time_selection_every_hour(c, b, d, "2")),
        Button(Const("–ö–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏"), id="every_3_hours", on_click=lambda c, b, d: time_selection_every_hour(c, b, d, "3")),
    ),
    Row(
    Button(Const("–í–≤–µ—Å—Ç–∏ —á–∞—Å —Å–∞–º–æ–º—É"), id="edit_time", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_time_write)),
    ),
    Button(Const("–ù–∞–∑–∞–¥"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_time)),
    state=EditSubscriptions.edit_t_time,
    getter=time_getter
)

edit_time_write_window = Window(
    Const("–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:\n"
      "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫–∞ —á–∞—Å—ñ–≤ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó,\n"
      "<b>–≤–≤–µ–¥—ñ—Ç—å —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ 9.30 12.45</b>"),
    Format("\nSelected Time: {time}", when=F["time"]),
    Format("\nNo time selected", when=~F["time"]),
    TextInput(
        id='news_input',
        on_success=on_time_success,
    ),
    Button(Const("–ù–∞–∑–∞–¥"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit_t_time)),
    state=EditSubscriptions.edit_time_write,
    getter=time_getter
)

# –û–±'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–∫–æ–Ω —É –¥—ñ–∞–ª–æ–≥
edit_subscription_dialog = Dialog(
    edit_subscription_window,
    edit_time_window,
    edit_d_time_window,
    edit_t_time_window,
    edit_time_write_window,
    select_language_window,
    calendar_window,
)
