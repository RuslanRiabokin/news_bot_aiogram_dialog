import logging
import operator
import re

from aiogram import Bot
from aiogram.enums import ChatMemberStatus
from aiogram.types import Message, CallbackQuery
from aiogram_dialog import Dialog, DialogManager, Window, ShowMode, StartMode
from aiogram_dialog.widgets.input import TextInput, ManagedTextInput
from aiogram_dialog.widgets.kbd import Button, Row, Column, Multiselect
from aiogram_dialog.widgets.text import Const, Format

from db_layer.db_factory import get_data_serice
from states_class_aiogram_dialog import MainDialogSG, SecondDialogSG


async def go_second_dialog(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü–µ—Ä–µ–º–∏–∫–∞—î—Ç—å—Å—è –Ω–∞ –ø–µ—Ä—à–µ –≤—ñ–∫–Ω–æ –¥—Ä—É–≥–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É"""
    await dialog_manager.start(state=SecondDialogSG.first)


async def switch_to_first_subscription(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü–µ—Ä–µ–º–∏–∫–∞—î—Ç—å—Å—è –Ω–∞ —Å—Ç–∞–Ω 'subscription' —É –ø–µ—Ä—à–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ"""
    await dialog_manager.switch_to(state=MainDialogSG.menu)


async def switch_to_first_lists(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü–µ—Ä–µ–º–∏–∫–∞—î—Ç—å—Å—è –Ω–∞ —Å—Ç–∞–Ω –≤–∏–±–æ—Ä—É —Ç–µ–º —É –ø–µ—Ä—à–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ"""
    await dialog_manager.switch_to(state=MainDialogSG.new_subscription)


async def return_to_subscription(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ —Å—Ç–∞–Ω—É 'subscription' —É –ø–µ—Ä—à–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ"""
    await dialog_manager.switch_to(state=MainDialogSG.menu)


async def get_topics(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –≤–∏–±–æ—Ä—É –≤ –¥—ñ–∞–ª–æ–∑—ñ –Ω–æ–≤–∏–Ω"""
    topics = [
        ("IT", '1'),
        ("–î–∏–∑–∞–π–Ω", '2'),
        ("–ù–∞—É–∫–∞", '3'),
        ("–°—É—Å–ø—ñ–ª—å—Å—Ç–≤–æ", '4'),
        ("–ö—É–ª—å—Ç—É—Ä–∞", '5'),
        ("–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ", '6'),
    ]
    return {"topics": topics}


def news_check(text: str) -> str:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–∫—Å—Ç—É –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–º—ñ—Å—Ç—É —ñ –¥–æ–≤–∂–∏–Ω–∏"""
    stripped_text = text.strip()  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Ç–µ–∫—Å—Ç –º—ñ—Å—Ç–∏—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –ª—ñ—Ç–µ—Ä—É —Ç–∞ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É
    if not stripped_text or not re.search(r'[a-zA-Z–∞-—è–ê-–Ø]', stripped_text):
        raise ValueError("–í–≤–µ–¥—ñ—Ç—å –Ω–µ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Ç–µ–∫—Å—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å –ª—ñ—Ç–µ—Ä–∏.")
    if len(stripped_text) < 2:
        raise ValueError("–¢–µ–∫—Å—Ç –º–∞—î –±—É—Ç–∏ –Ω–µ –∫–æ—Ä–æ—Ç—à–∏–π –∑–∞ –¥–≤—ñ –ª—ñ—Ç–µ—Ä–∏.")
    if len(stripped_text) > 25:
        raise ValueError("–¢–µ–∫—Å—Ç –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 25 —Å–∏–º–≤–æ–ª—ñ–≤.")
    return stripped_text



async def error_news_handler(
        message: Message,
        widget: ManagedTextInput,
        dialog_manager: DialogManager,
        error: ValueError):
    """–•–µ–Ω–¥–ª–µ—Ä, —è–∫–∏–π —Å–ø—Ä–∞—Ü—é—î –Ω–∞ –≤–≤—ñ–¥ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏"""
    await message.answer(text=str(error))  # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É


async def correct_news_handler(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    await message.answer(text=f"–í–∏ –≤–≤–µ–ª–∏ –Ω–æ–≤–∏–Ω—É: {text}")
    dialog_manager.dialog_data['selected_topics'] = [text]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ
    await dialog_manager.switch_to(state=MainDialogSG.channel_name, show_mode=ShowMode.SEND)




async def confirm_selected_topics(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –≤–∏–±—ñ—Ä –Ω–æ–≤–∏–Ω —ñ –∑–±–µ—Ä—ñ–≥–∞—î –æ–±—Ä–∞–Ω—ñ —Ç–µ–º–∏ –≤ dialog_data –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö."""
    await callback.message.delete()

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ —Ç–µ–º–∏
    multi_topics_widget = dialog_manager.find("multi_topics")
    selected_topics = multi_topics_widget.get_checked()

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ get_topics, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–µ–º
    topics_data = await get_topics(dialog_manager)
    all_topics = topics_data["topics"]

    # –í—ñ–¥–±–∏—Ä–∞—î–º–æ –Ω–∞–∑–≤–∏ —Ç–µ–º –∑–∞ —ó—Ö —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏
    selected_topic_names = [name for name, id in all_topics if id in selected_topics]

    if selected_topic_names:
        topics_list = ", ".join(selected_topic_names)
        await callback.message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ç–µ–º–∏ –Ω–æ–≤–∏–Ω: {topics_list}", disable_notification=True)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ —Ç–µ–º–∏ –≤ dialog_data –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        dialog_manager.dialog_data['selected_topics'] = selected_topic_names

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É
        await dialog_manager.switch_to(state=MainDialogSG.channel_name, show_mode=ShowMode.SEND)
    else:
        await callback.message.answer("–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó —Ç–µ–º–∏ –Ω–æ–≤–∏–Ω.", disable_notification=True)


async def handle_channel_name(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
) -> None:
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö."""
    bot: Bot = message.bot

    # –û–±—Ä–æ–±–∫–∞ –∫–∞–Ω–∞–ª—É
    if text.startswith("https://t.me/"):
        channel_name = "@" + text.split("https://t.me/")[-1]
    elif not text.startswith("@"):
        channel_name = "@" + text
    else:
        channel_name = text

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        bot_chat_member = await bot.get_chat_member(channel_name, bot.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
        user_chat_member = await bot.get_chat_member(channel_name, message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
        if (bot_chat_member.status == ChatMemberStatus.ADMINISTRATOR
                and (user_chat_member.status == ChatMemberStatus.ADMINISTRATOR or
                     user_chat_member.status == ChatMemberStatus.CREATOR)):
            # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            await message.answer(f"–í–∏ –≤–≤–µ–ª–∏ –∫–∞–Ω–∞–ª: {channel_name}")
            dialog_manager.dialog_data["channel_name"] = channel_name

            # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±—Ä–∞–Ω—ñ —Ç–µ–º–∏ –∑ dialog_data
            selected_topics = dialog_manager.dialog_data.get("selected_topics", [])

            if selected_topics:
                try:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ async with –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
                    async with get_data_serice() as db:
                        for topic_name in selected_topics:
                            news_id = await db.insert_news(
                                topic_name=topic_name,
                                channel_name=channel_name,
                                user_id=message.from_user.id,
                            )
                            await db.add_publish_date(news_id, ['everyday'])
                            await db.add_publish_time(news_id, ['every--hour'])
                    await message.answer("–ü—ñ–¥–ø–∏—Å–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!")
                except Exception as e:
                    await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏.")
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")

            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            await dialog_manager.start(
                state=MainDialogSG.menu, mode=StartMode.RESET_STACK, show_mode=ShowMode.DELETE_AND_SEND
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            await message.answer(
                "‚ùå –í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É. –î–æ–¥–∞–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫–∞–º."
            )
    except Exception as e:
        await message.answer(
            "‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∏ –≤–≤–µ–ª–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É."
        )
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–∞–Ω–∞–ª—É: {e}")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await dialog_manager.start(
        state=MainDialogSG.menu, mode=StartMode.RESET_STACK, show_mode=ShowMode.DELETE_AND_SEND
    )



start_dialog = Dialog(
    Window(
        Const("–í–∞—Å –≤—ñ—Ç–∞—î –Ω–æ–≤–∏–Ω–Ω–∏–π –±–æ—Ç üì∞!\n\n"
              "–ù–∞—Ä–∞–∑—ñ –∑–∞–≤–¥—è–∫–∏ –Ω–∞—à–æ–º—É –±–æ—Ç—É –≤–∏ –º–æ–∂–µ—Ç–µ:\n\n"
              "1Ô∏è‚É£ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –ø—ñ–¥–ø–∏—Å–∫—É ‚úÖ\n"
              "2Ô∏è‚É£ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–æ–∫ üìã\n"
              "‚ûï –î–æ–¥–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–æ –Ω–æ–≤–∏–Ω–∏\n"
              "‚ê° –í–∏–¥–∞–ª–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è\n"
              "‚ê° –í–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É\n"
              "‚ôªÔ∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É\n"
              "üì∞ –ó–º—ñ–Ω–∏—Ç–∏ —Ç–∏–ø –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω\n"
              "üßæüöÄ –ü–æ—á–∞—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é\n\n"
              "–î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ–Ω—à–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –Ω–∏–∂—á–µ."),
        Row(
            Button(Const('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–µ–Ω—é'), id='go_menu', on_click=switch_to_first_subscription),
        ),
        state=MainDialogSG.start
    ),
    Window(
        Const('<b>–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –ü—ñ–¥–ø–∏—Å–æ–∫</b>\n'),
        Const('–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–º–∏–∫–∞—Ç–∏—Å—è –º—ñ–∂ –≤—ñ–∫–Ω–∞–º–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –∞–±–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–æ–≤–æ–≥–æ üëá'),
        Row(
            Button(Const('–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É'), id='w_second', on_click=switch_to_first_lists),
        ),
        Row(
            Button(Const('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –°–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–æ–∫ ‚ñ∂Ô∏è'), id='go_second_dialog', on_click=go_second_dialog),
        ),
        state=MainDialogSG.menu
    ),
    Window(
        Const('<b>–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∏ –Ω–æ–≤–∏–Ω:</b>'),
        Column(
            Multiselect(
                checked_text=Format('‚úîÔ∏è {item[0]}'),
                unchecked_text=Format(' {item[0]}'),
                id='multi_topics',
                item_id_getter=operator.itemgetter(1),
                items="topics",
            ),
        ),
        Row(Button(Const('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –Ω–æ–≤–∏–Ω–∏ üìù'),
                   id='confirm_topics', on_click=confirm_selected_topics)),
        Row(Button(Const('–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –Ω–æ–≤–∏–Ω—É üìù'),
                   id='enter_news', on_click=lambda callback, button,
                    dialog_manager: dialog_manager.switch_to(
                    state=MainDialogSG.enter_news))),
        Row(
            Button(Const('–£ 2-–π –¥—ñ–∞–ª–æ–≥ ‚ñ∂Ô∏è'), id='go_second_dialog', on_click=go_second_dialog),
            Button(Const('–°–∫–∞—Å—É–≤–∞—Ç–∏'), id='cancel_to_subscription', on_click=return_to_subscription)
        ),
        state=MainDialogSG.new_subscription,
        getter=get_topics
    ),
    Window(
        Const("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –Ω–æ–≤–∏–Ω—É:"),
        TextInput(
            id='news_input',
            type_factory=news_check,
            on_success=correct_news_handler,
            on_error=error_news_handler,
        ),
        state=MainDialogSG.enter_news
    ),
    Window(
        Const("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–∏–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –Ω–∞ —è–∫–æ–º—É –±—É–¥–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏—Å—å –Ω–æ–≤–∏–Ω–∏:"),
        TextInput(
            id='channel_name_input',
            on_success=handle_channel_name
        ),
        Row(Button(Const('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é –ø—ñ–¥–ø–∏—Å–æ–∫'), id='cancel_to_subscription', on_click=return_to_subscription)),
        state=MainDialogSG.channel_name
    )
)

